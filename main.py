import os
import asyncio
from telethon import TelegramClient, events
from dotenv import load_dotenv
from flask import Flask
from threading import Thread

# Flask szerver (Render miatt, de lok√°lisan sem zavar)
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Telegram Forward Bot akt√≠v (user account m√≥dban)"

def run_web():
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

def keep_alive():
    t = Thread(target=run_web)
    t.daemon = True
    t.start()

# Ind√≠tjuk a webservert (Render vagy lok√°l teszt miatt)
keep_alive()

# Bet√∂ltj√ºk az .env v√°ltoz√≥kat
load_dotenv()

# üîß Alapbe√°ll√≠t√°sok k√∂rnyezeti v√°ltoz√≥kb√≥l
api_id = os.getenv('TELEGRAM_API_ID')
api_hash = os.getenv('TELEGRAM_API_HASH')
phone_number = os.getenv('PHONE_NUMBER')
source_chat_ids_str = os.getenv('SOURCE_CHAT_ID', '0')
target_chat_id = int(os.getenv('TARGET_CHAT_ID', '0'))

# T√∂bb forr√°s csoport t√°mogat√°sa
source_chat_ids = [int(id.strip()) for id in source_chat_ids_str.split(',') if id.strip()]

# Ellen≈ërizz√ºk, hogy minden megvan-e
missing = [var for var, val in [
    ("TELEGRAM_API_ID", api_id),
    ("TELEGRAM_API_HASH", api_hash),
    ("PHONE_NUMBER", phone_number),
    ("SOURCE_CHAT_ID", source_chat_ids_str),
    ("TARGET_CHAT_ID", target_chat_id)
] if not val]

if missing:
    raise ValueError(f"‚ùå Hi√°nyz√≥ environment v√°ltoz√≥k: {', '.join(missing)}")

# üì± User account m√≥d (nem bot token)
import asyncio
asyncio.set_event_loop(asyncio.new_event_loop())
client = TelegramClient('user_session', int(api_id), api_hash)

chat_names = {}

async def startup():
    await client.connect()
    if not await client.is_user_authorized():
        print("üì± Bejelentkez√©s sz√ºks√©ges...")
        await client.start(phone=lambda: phone_number)
    else:
        await client.start()

    me = await client.get_me()
    print(f"‚úÖ Bejelentkezve mint: {me.first_name} ({me.username or 'nincs username'})")
    print(f"üì± Telefonsz√°m: {me.phone}")
    print(f"üì• Forr√°s chat-ek sz√°ma: {len(source_chat_ids)}")
    print(f"üì§ C√©l chat ID: {target_chat_id}")

    for src in source_chat_ids:
        try:
            ent = await client.get_entity(src)
            chat_names[src] = getattr(ent, 'title', 'Priv√°t chat')
            print(f"‚úÖ Forr√°s chat el√©rhet≈ë: {chat_names[src]} (ID: {src})")
        except Exception as e:
            print(f"‚ùå Hiba a forr√°s chatn√°l ({src}): {e}")

@client.on(events.NewMessage(chats=source_chat_ids))
async def forward_message(event):
    try:
        src_name = chat_names.get(event.chat_id, str(event.chat_id))
        print(f"üì® √öj √ºzenet √©rkezett: {src_name} (ID: {event.id})")
        await event.forward_to(target_chat_id)
        print(f"‚úÖ √úzenet tov√°bb√≠tva: {event.id}")
    except Exception as e:
        print(f"‚ùå Tov√°bb√≠t√°si hiba: {e}")

async def main():
    await startup()
    print("\nüöÄ A bot fut √©s figyeli az √ºzeneteket...\n")
    await client.run_until_disconnected()

if __name__ == "__main__":
    with client:
        client.loop.run_until_complete(main())
